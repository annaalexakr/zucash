{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Unbalanced",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forgiver",
          "type": "address"
        }
      ],
      "name": "accept",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forgiven",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "forgive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        }
      ],
      "name": "honour",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "propose",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserve",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3a3138ce621ee98084f43b6f7542887a3cf6846f50808d5c7a415fad64643d83",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "451083",
    "logsBloom": "0x
    "blockHash": "0xa0a2d2e8aae060379db430391eb4289248525d1154b9a18899436e6ad22a14a7",
    "transactionHash": "0x3a3138ce621ee98084f43b6f7542887a3cf6846f50808d5c7a415fad64643d83",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "451083",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "f036578cf0e71261eb99dc389f4bca1c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Unbalanced\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forgiver\",\"type\":\"address\"}],\"name\":\"accept\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forgiven\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"forgive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"}],\"name\":\"honour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"propose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"accept(address)\":{\"params\":{\"forgiver\":\"allows us to differentiate between accounts who forgive so no-one is                  forced to accept forgiveness from an account which may tarnish their history.\"}},\"forgive(address,uint256)\":{\"params\":{\"amount\":\"the amount to forgive\",\"forgiven\":\"the address to be forgiven\"}},\"honour(address)\":{\"params\":{\"proposer\":\"the address of the account which proposed this to ensure no-one is forced                 to accept HON they don't want to.\"}},\"propose(address,uint256)\":{\"params\":{\"amount\":\"the amount of HON to be created once it is honoured into existence.\",\"receiver\":\"the address who is set to take on the HON once created\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accept(address)\":{\"notice\":\"erase HON by accepting the amount set in forgive()\"},\"forgive(address,uint256)\":{\"notice\":\"begin the process of erasing HON by setting the amount and address it should be removed from\"},\"honour(address)\":{\"notice\":\"create HON by accepting the amount set in propose()\"},\"propose(address,uint256)\":{\"notice\":\"begin the process of creating HON by setting the amount and address it should be added to\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Honour.sol\":\"Honour\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\n/// @notice Gas efficient ERC20 to explore alternative currency designs\\n/// @author Modified from Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @author Modified for this use by stripping all transfer and approval logic + associated events.\\ncontract ERC20 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address from, address to, uint256 amount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    INTERNAL PROMISE/FORGIVE LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\",\"keccak256\":\"0x89f87207a63bff2edd002623cc87aec2985a215019c8be22a77225bbd8271dbe\",\"license\":\"MIT\"},\"contracts/Honour.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"./ERC20.sol\\\";\\n\\ncontract Honour is ERC20 {\\n\\n    error Unbalanced();\\n\\n    ERC20 public reserve;\\n\\n    // Storage mappings for proposals and forgiveness.\\n    // We store information about both the account with which the proposal/forgiving\\n    // is associated, as well as the account which initiated it, in order to ensure that people\\n    // can pick and choose at their leisure which proposals to accept and which to leave.\\n    mapping(address => mapping(address => uint256)) proposal;\\n    mapping(address => mapping(address => uint256)) forgiving;\\n\\n    constructor(address _reserve) ERC20(\\\"HONOUR\\\", \\\"HON\\\", 18) {\\n        reserve = ERC20(_reserve);\\n    }\\n\\n    /**\\n     * @notice begin the process of creating HON by setting the amount and address it should be added to\\n     * @param  receiver the address who is set to take on the HON once created\\n     * @param  amount the amount of HON to be created once it is honoured into existence.\\n     */\\n    function propose(address receiver, uint256 amount)\\n        public\\n    {\\n        proposal[receiver][msg.sender] += amount;\\n    }\\n\\n    /**\\n     * @notice create HON by accepting the amount set in propose()\\n     * @param proposer the address of the account which proposed this to ensure no-one is forced\\n     *                 to accept HON they don't want to.\\n     */\\n    function honour(address proposer)\\n        public\\n    {\\n        _mint(msg.sender, proposal[msg.sender][proposer]);\\n    }\\n\\n    /**\\n     * @notice begin the process of erasing HON by setting the amount and address it should be removed from\\n     * @param  forgiven the address to be forgiven\\n     * @param  amount the amount to forgive\\n     */\\n    function forgive(address forgiven, uint256 amount)\\n        public\\n    {\\n        // you can't forgive more than your current balance, nor can you forgive more than\\n        // the current balance of the person you are forgiving\\n        if(balanceOf[msg.sender] < amount || balanceOf[forgiven] < amount) {\\n            revert Unbalanced();\\n        }\\n        forgiving[forgiven][msg.sender] += amount;\\n    }\\n\\n    /**\\n     * @notice erase HON by accepting the amount set in forgive()\\n     * @param  forgiver allows us to differentiate between accounts who forgive so no-one is\\n     *                  forced to accept forgiveness from an account which may tarnish their history.\\n     */\\n    function accept(address forgiver)\\n        public\\n    {\\n        _burn(msg.sender, forgiving[msg.sender][forgiver]);\\n    }\\n}\",\"keccak256\":\"0x18d012ac92c876b29512dca6a134b63a1c23ec6199fd9e37d31166943e7f3ee1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516107d83803806107d883398101604081905261002f91610177565b60408051808201825260068152652427a727aaa960d11b6020808301918252835180850190945260038452622427a760e91b90840152815191929160129161007a91600091906100de565b50815161008e9060019060208501906100de565b5060f81b7fff00000000000000000000000000000000000000000000000000000000000000166080525050600480546001600160a01b0319166001600160a01b03929092169190911790556101e2565b8280546100ea906101a7565b90600052602060002090601f01602090048101928261010c5760008555610152565b82601f1061012557805160ff1916838001178555610152565b82800160010185558215610152579182015b82811115610152578251825591602001919060010190610137565b5061015e929150610162565b5090565b5b8082111561015e5760008155600101610163565b60006020828403121561018957600080fd5b81516001600160a01b03811681146101a057600080fd5b9392505050565b600181811c908216806101bb57607f821691505b602082108114156101dc57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160f81c6105d96101ff600039600060f201526105d96000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063589de5df11610066578063589de5df1461013957806370a082311461014c57806395d89b411461016c5780639f00592014610174578063cd3293de1461018757600080fd5b806306fdde03146100a357806318160ddd146100c157806321038b4c146100d8578063313ce567146100ed57806341e707cd14610126575b600080fd5b6100ab6101b2565b6040516100b891906104ce565b60405180910390f35b6100ca60025481565b6040519081526020016100b8565b6100eb6100e63660046104a4565b610240565b005b6101147f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff90911681526020016100b8565b6100eb610134366004610482565b6102ce565b6100eb6101473660046104a4565b6102ff565b6100ca61015a366004610482565b60036020526000908152604090205481565b6100ab610332565b6100eb610182366004610482565b61033f565b60045461019a906001600160a01b031681565b6040516001600160a01b0390911681526020016100b8565b600080546101bf90610552565b80601f01602080910402602001604051908101604052809291908181526020018280546101eb90610552565b80156102385780601f1061020d57610100808354040283529160200191610238565b820191906000526020600020905b81548152906001019060200180831161021b57829003601f168201915b505050505081565b3360009081526003602052604090205481118061027457506001600160a01b03821660009081526003602052604090205481115b15610292576040516301c14c8d60e21b815260040160405180910390fd5b6001600160a01b0382166000908152600660209081526040808320338452909152812080548392906102c5908490610523565b90915550505050565b3360008181526005602090815260408083206001600160a01b03861684529091529020546102fc919061036d565b50565b6001600160a01b0382166000908152600560209081526040808320338452909152812080548392906102c5908490610523565b600180546101bf90610552565b3360008181526006602090815260408083206001600160a01b03861684529091529020546102fc91906103e9565b806002600082825461037f9190610523565b90915550506001600160a01b03821660008181526003602090815260408083208054860190558051928352908201929092529081018290527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906060015b60405180910390a15050565b6001600160a01b0382166000908152600360205260408120805483929061041190849061053b565b9091555050600280548290039055604080516001600160a01b0384168152600060208201529081018290527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906060016103dd565b80356001600160a01b038116811461047d57600080fd5b919050565b60006020828403121561049457600080fd5b61049d82610466565b9392505050565b600080604083850312156104b757600080fd5b6104c083610466565b946020939093013593505050565b600060208083528351808285015260005b818110156104fb578581018301518582016040015282016104df565b8181111561050d576000604083870101525b50601f01601f1916929092016040019392505050565b600082198211156105365761053661058d565b500190565b60008282101561054d5761054d61058d565b500390565b600181811c9082168061056657607f821691505b6020821081141561058757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220d8d2e7ba6e3479bd718a0495496177709d128fcb4d626e5518ee8f544b65099164736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063589de5df11610066578063589de5df1461013957806370a082311461014c57806395d89b411461016c5780639f00592014610174578063cd3293de1461018757600080fd5b806306fdde03146100a357806318160ddd146100c157806321038b4c146100d8578063313ce567146100ed57806341e707cd14610126575b600080fd5b6100ab6101b2565b6040516100b891906104ce565b60405180910390f35b6100ca60025481565b6040519081526020016100b8565b6100eb6100e63660046104a4565b610240565b005b6101147f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff90911681526020016100b8565b6100eb610134366004610482565b6102ce565b6100eb6101473660046104a4565b6102ff565b6100ca61015a366004610482565b60036020526000908152604090205481565b6100ab610332565b6100eb610182366004610482565b61033f565b60045461019a906001600160a01b031681565b6040516001600160a01b0390911681526020016100b8565b600080546101bf90610552565b80601f01602080910402602001604051908101604052809291908181526020018280546101eb90610552565b80156102385780601f1061020d57610100808354040283529160200191610238565b820191906000526020600020905b81548152906001019060200180831161021b57829003601f168201915b505050505081565b3360009081526003602052604090205481118061027457506001600160a01b03821660009081526003602052604090205481115b15610292576040516301c14c8d60e21b815260040160405180910390fd5b6001600160a01b0382166000908152600660209081526040808320338452909152812080548392906102c5908490610523565b90915550505050565b3360008181526005602090815260408083206001600160a01b03861684529091529020546102fc919061036d565b50565b6001600160a01b0382166000908152600560209081526040808320338452909152812080548392906102c5908490610523565b600180546101bf90610552565b3360008181526006602090815260408083206001600160a01b03861684529091529020546102fc91906103e9565b806002600082825461037f9190610523565b90915550506001600160a01b03821660008181526003602090815260408083208054860190558051928352908201929092529081018290527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906060015b60405180910390a15050565b6001600160a01b0382166000908152600360205260408120805483929061041190849061053b565b9091555050600280548290039055604080516001600160a01b0384168152600060208201529081018290527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906060016103dd565b80356001600160a01b038116811461047d57600080fd5b919050565b60006020828403121561049457600080fd5b61049d82610466565b9392505050565b600080604083850312156104b757600080fd5b6104c083610466565b946020939093013593505050565b600060208083528351808285015260005b818110156104fb578581018301518582016040015282016104df565b8181111561050d576000604083870101525b50601f01601f1916929092016040019392505050565b600082198211156105365761053661058d565b500190565b60008282101561054d5761054d61058d565b500390565b600181811c9082168061056657607f821691505b6020821081141561058757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220d8d2e7ba6e3479bd718a0495496177709d128fcb4d626e5518ee8f544b65099164736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "accept(address)": {
        "params": {
          "forgiver": "allows us to differentiate between accounts who forgive so no-one is                  forced to accept forgiveness from an account which may tarnish their history."
        }
      },
      "forgive(address,uint256)": {
        "params": {
          "amount": "the amount to forgive",
          "forgiven": "the address to be forgiven"
        }
      },
      "honour(address)": {
        "params": {
          "proposer": "the address of the account which proposed this to ensure no-one is forced                 to accept HON they don't want to."
        }
      },
      "propose(address,uint256)": {
        "params": {
          "amount": "the amount of HON to be created once it is honoured into existence.",
          "receiver": "the address who is set to take on the HON once created"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "accept(address)": {
        "notice": "erase HON by accepting the amount set in forgive()"
      },
      "forgive(address,uint256)": {
        "notice": "begin the process of erasing HON by setting the amount and address it should be removed from"
      },
      "honour(address)": {
        "notice": "create HON by accepting the amount set in propose()"
      },
      "propose(address,uint256)": {
        "notice": "begin the process of creating HON by setting the amount and address it should be added to"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12,
        "contract": "contracts/Honour.sol:Honour",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 14,
        "contract": "contracts/Honour.sol:Honour",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 18,
        "contract": "contracts/Honour.sol:Honour",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 22,
        "contract": "contracts/Honour.sol:Honour",
        "label": "balanceOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 111,
        "contract": "contracts/Honour.sol:Honour",
        "label": "reserve",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ERC20)101"
      },
      {
        "astId": 117,
        "contract": "contracts/Honour.sol:Honour",
        "label": "proposal",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 123,
        "contract": "contracts/Honour.sol:Honour",
        "label": "forgiving",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ERC20)101": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}